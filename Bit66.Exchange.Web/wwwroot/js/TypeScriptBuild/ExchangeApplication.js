/// <reference path="../typings/knockout/knockout.d.ts" />
/// <reference path="../typings/jquery/jquery.d.ts" />
/// <reference path="../typings/knockout.validation/knockout.validation.d.ts" />
define(["require", "exports", 'jquery', 'knockout', "./ExchangeGroupViewModel"], function (require, exports, $, ko, ExchangeGroupViewModel) {
    var ExchangeEditorViewModel = ExchangeGroupViewModel.Common.ExchangeEditorViewModel;
    var ExcahngeApplication = (function () {
        function ExcahngeApplication() {
            var _this = this;
            this.IsBusy = ko.observable(true);
            this.SaleViewModel = new ExchangeEditorViewModel(true);
            this.PurchaseViewModel = new ExchangeEditorViewModel(false);
            this.RegisteredItems = ko.observableArray();
            this.initialize = function () {
                _this.refresh();
            };
            this.refresh = function () {
                _this.IsBusy(true);
                $.get("/api/v1/Exchange/GetModel", function (data) {
                    console.log(data);
                    _this.IsBusy(false);
                    _this.SaleViewModel.CleanUp();
                    _this.SaleViewModel.Items(data.SalesOrders);
                    _this.PurchaseViewModel.CleanUp();
                    _this.PurchaseViewModel.Items(data.PurchaseOrders);
                    _this.RegisteredItems(data.Registrations);
                });
            };
            this.addNewExchangeGroup = function (isSale) {
                var url = "/api/v1/Exchange/" + (isSale ? "AddNewSaleItem" : "AddNewPurchaiseItem");
                var vm = isSale ? _this.SaleViewModel : _this.PurchaseViewModel;
                if (vm.errors().length === 0) {
                    var model = ko.toJS(vm);
                    $.post(url, { model: model }, function () {
                        _this.initialize();
                    });
                }
                else {
                    alert('Please check your submission.');
                    vm.errors.showAllMessages();
                }
            };
        }
        return ExcahngeApplication;
    })();
    return ExcahngeApplication;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV4Y2hhbmdlQXBwbGljYXRpb24udHMiXSwibmFtZXMiOlsiRXhjYWhuZ2VBcHBsaWNhdGlvbiIsIkV4Y2FobmdlQXBwbGljYXRpb24uY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUFBLDBEQUEwRDtBQUMxRCxzREFBc0Q7QUFDdEQsZ0ZBQWdGOztJQUtoRixJQUFPLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQztJQUd2RjtRQUFBQTtZQUFBQyxpQkEyQ0NBO1lBekNVQSxXQUFNQSxHQUFHQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFVQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUN0Q0Esa0JBQWFBLEdBQUdBLElBQUlBLHVCQUF1QkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbERBLHNCQUFpQkEsR0FBR0EsSUFBSUEsdUJBQXVCQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUN2REEsb0JBQWVBLEdBQUdBLEVBQUVBLENBQUNBLGVBQWVBLEVBQTBCQSxDQUFDQTtZQUUvREEsZUFBVUEsR0FBR0E7Z0JBQ2ZBLEtBQUlBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1lBQ3BCQSxDQUFDQSxDQUFBQTtZQUVEQSxZQUFPQSxHQUFHQTtnQkFDTkEsS0FBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xCQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSwyQkFBMkJBLEVBQUVBLFVBQUFBLElBQUlBO29CQUNuQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ2xCQSxLQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtvQkFFbkJBLEtBQUlBLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO29CQUM3QkEsS0FBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7b0JBRTNDQSxLQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO29CQUNqQ0EsS0FBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtvQkFFbERBLEtBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO2dCQUM3Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDUEEsQ0FBQ0EsQ0FBQUE7WUFFREEsd0JBQW1CQSxHQUFHQSxVQUFDQSxNQUFlQTtnQkFFbENBLElBQUlBLEdBQUdBLEdBQUdBLG1CQUFtQkEsR0FBR0EsQ0FBQ0EsTUFBTUEsR0FBR0EsZ0JBQWdCQSxHQUFHQSxxQkFBcUJBLENBQUNBLENBQUNBO2dCQUNwRkEsSUFBSUEsRUFBRUEsR0FBR0EsTUFBTUEsR0FBR0EsS0FBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsS0FBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtnQkFFOURBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUMzQkEsSUFBSUEsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3hCQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxFQUFFQSxFQUFFQSxLQUFLQSxFQUFFQSxLQUFLQSxFQUFFQSxFQUFFQTt3QkFDMUJBLEtBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBO29CQUN0QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1BBLENBQUNBO2dCQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDRkEsS0FBS0EsQ0FBQ0EsK0JBQStCQSxDQUFDQSxDQUFDQTtvQkFDdkNBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBO2dCQUNoQ0EsQ0FBQ0E7WUFDTEEsQ0FBQ0EsQ0FBQUE7UUFDTEEsQ0FBQ0E7UUFBREQsMEJBQUNBO0lBQURBLENBM0NBLEFBMkNDQSxJQUFBO0lBRUQsT0FBUyxtQkFBbUIsQ0FBQSIsImZpbGUiOiJFeGNoYW5nZUFwcGxpY2F0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3Mva25vY2tvdXQva25vY2tvdXQuZC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL2tub2Nrb3V0LnZhbGlkYXRpb24va25vY2tvdXQudmFsaWRhdGlvbi5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XHJcbmltcG9ydCBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XHJcbmltcG9ydCBFeGNoYW5nZUdyb3VwVmlld01vZGVsID0gcmVxdWlyZShcIi4vRXhjaGFuZ2VHcm91cFZpZXdNb2RlbFwiKTtcclxuaW1wb3J0IEV4Y2hhbmdlRWRpdG9yVmlld01vZGVsID0gRXhjaGFuZ2VHcm91cFZpZXdNb2RlbC5Db21tb24uRXhjaGFuZ2VFZGl0b3JWaWV3TW9kZWw7XHJcbmltcG9ydCBSZWdpc3RlcmVkSXRlbVZpZXdNb2VsID0gRXhjaGFuZ2VHcm91cFZpZXdNb2RlbC5Db21tb24uUmVnaXN0ZXJlZEl0ZW1WaWV3TW9lbDtcclxuXHJcbmNsYXNzIEV4Y2FobmdlQXBwbGljYXRpb24ge1xyXG5cclxuICAgIHB1YmxpYyBJc0J1c3kgPSBrby5vYnNlcnZhYmxlPGJvb2xlYW4+KHRydWUpO1xyXG4gICAgcHVibGljIFNhbGVWaWV3TW9kZWwgPSBuZXcgRXhjaGFuZ2VFZGl0b3JWaWV3TW9kZWwodHJ1ZSk7XHJcbiAgICBwdWJsaWMgUHVyY2hhc2VWaWV3TW9kZWwgPSBuZXcgRXhjaGFuZ2VFZGl0b3JWaWV3TW9kZWwoZmFsc2UpO1xyXG4gICAgcHVibGljIFJlZ2lzdGVyZWRJdGVtcyA9IGtvLm9ic2VydmFibGVBcnJheTxSZWdpc3RlcmVkSXRlbVZpZXdNb2VsPigpO1xyXG5cclxuICAgIHB1YmxpYyBpbml0aWFsaXplID0gKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuSXNCdXN5KHRydWUpO1xyXG4gICAgICAgICQuZ2V0KFwiL2FwaS92MS9FeGNoYW5nZS9HZXRNb2RlbFwiLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuSXNCdXN5KGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuU2FsZVZpZXdNb2RlbC5DbGVhblVwKCk7XHJcbiAgICAgICAgICAgIHRoaXMuU2FsZVZpZXdNb2RlbC5JdGVtcyhkYXRhLlNhbGVzT3JkZXJzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuUHVyY2hhc2VWaWV3TW9kZWwuQ2xlYW5VcCgpO1xyXG4gICAgICAgICAgICB0aGlzLlB1cmNoYXNlVmlld01vZGVsLkl0ZW1zKGRhdGEuUHVyY2hhc2VPcmRlcnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5SZWdpc3RlcmVkSXRlbXMoZGF0YS5SZWdpc3RyYXRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGROZXdFeGNoYW5nZUdyb3VwID0gKGlzU2FsZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciB1cmwgPSBcIi9hcGkvdjEvRXhjaGFuZ2UvXCIgKyAoaXNTYWxlID8gXCJBZGROZXdTYWxlSXRlbVwiIDogXCJBZGROZXdQdXJjaGFpc2VJdGVtXCIpO1xyXG4gICAgICAgIHZhciB2bSA9IGlzU2FsZSA/IHRoaXMuU2FsZVZpZXdNb2RlbCA6IHRoaXMuUHVyY2hhc2VWaWV3TW9kZWw7XHJcblxyXG4gICAgICAgIGlmICh2bS5lcnJvcnMoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdmFyIG1vZGVsID0ga28udG9KUyh2bSk7XHJcbiAgICAgICAgICAgICQucG9zdCh1cmwsIHsgbW9kZWw6IG1vZGVsIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCdQbGVhc2UgY2hlY2sgeW91ciBzdWJtaXNzaW9uLicpO1xyXG4gICAgICAgICAgICB2bS5lcnJvcnMuc2hvd0FsbE1lc3NhZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBFeGNhaG5nZUFwcGxpY2F0aW9uIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
